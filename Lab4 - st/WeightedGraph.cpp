#include<stdio.h>#include<stdlib.h>#define NULL_VALUE -999999#define INFINITY 999999#define WHITE 1#define GREY 2#define BLACK 3class Queue {    int queueInitSize ;    int queueMaxSize;    int * data;    int length;    int front;    int rear;public:    Queue();    ~Queue();    void enqueue(int item); //insert item in the queue    int dequeue(); //returns the item according to FIFO    bool empty(); //return true if Queue is empty};Queue::Queue() {    queueInitSize = 2 ;    queueMaxSize = queueInitSize;    data = new int[queueMaxSize] ; //allocate initial memory    length = 0 ;    front = 0;    rear = 0;}void Queue::enqueue(int item) {    if (length == queueMaxSize) {        int * tempData ;        //allocate new memory space for tempList        queueMaxSize = 2 * queueMaxSize ;        tempData = new int[queueMaxSize] ;        int i, j;        j = 0;        for( i = rear; i < length ; i++ ) {            tempData[j++] = data[i] ; //copy items from rear        }        for( i = 0; i < rear ; i++ ) {            tempData[j++] = data[i] ; //copy items before rear        }        rear = 0 ;        front = length ;        delete[] data ; //free the memory allocated before        data = tempData ; //make list to point to new memory    }    data[front] = item ; //store new item    front = (front + 1) % queueMaxSize ;    length++ ;}bool Queue::empty() {    if(length == 0) return true ;    else return false ;}int Queue::dequeue() {    if(length == 0) return NULL_VALUE ;    int item = data[rear] ;    rear = (rear + 1) % queueMaxSize ;    length-- ;    return item ;}Queue::~Queue() {    if(data) delete[] data; //deallocate memory    data = 0; //set to NULL}//****************Queue class ends here************************//****************Dynamic ArrayList class based************************class ArrayList {    int * list ;    int length ;    int listMaxSize ;    int listInitSize ;public:    ArrayList() ;    ~ArrayList() ;    int searchItem(int item) ;    int searchItem(int item,int weight) ;    void insertItem(int item,int weight) ;    void removeItem(int item,int weight) ;    void removeItemAt(int item);    int getItem(int position,int &item, int &weight) ;    int getLength();    bool empty();    void printList();} ;ArrayList::ArrayList() {    listInitSize = 4 ;    listMaxSize = listInitSize ;    list = new int[listMaxSize] ;    length = 0 ;}void ArrayList::insertItem(int newitem, int weight) {    int * tempList ;    if (length == listMaxSize) {        //allocate new memory space for tempList        listMaxSize = 2 * listMaxSize ;        tempList = new int[listMaxSize] ;        int i;        for( i = 0; i < length ; i += 2 ) {            tempList[i] = list[i] ;            tempList[i+1] = list[i+1] ; //copy all items from list to tempList        }        delete[] list ; //free the memory allocated before        list = tempList ; //make list to point to new memory    };    list[length] = newitem ;    list[length+1] = weight ; //store new item    length += 2 ;}int ArrayList::searchItem(int item) {    int i = 0;    for (i = 0; i < length; i += 2) {        if( list[i] == item ) return i;    }    return NULL_VALUE;}int ArrayList::searchItem(int item,int weight) {    int i = 0;    for (i = 0; i < length; i += 2) {        if( list[i] == item && list[i+1] == weight) return i;    }    return NULL_VALUE;}void ArrayList::removeItemAt(int position) { //do not preserve order of items    if ( position < 0 || position >= length ) return ; //nothing to remove    list[position] = list[length-2] ;    list[position+1] = list[length-1] ;    length -= 2;    return ;}void ArrayList::removeItem(int item,int weight) {    int position;    position = searchItem(item,weight) ;    if ( position == NULL_VALUE ) return ; //nothing to remove    removeItemAt(position) ;}int ArrayList::getItem(int position,int &item, int &weight) {    if(position < 0 || position >= length) return NULL_VALUE ;    item =  list[position] ;    weight = list[position+1] ;    return list[position] ;}int ArrayList::getLength() {    return length/2 ;}bool ArrayList::empty() {    if(length==0)return true;    else return false;}void ArrayList::printList() {    int i;    for(i=0; i<length; i+=2)        printf("(%d %d) ", list[i],list[i+1]);    //printf("Current size: %d, current length: %d\n", listMaxSize, length);}ArrayList::~ArrayList() {    if(list) delete [] list;    list = 0 ;}//******************ArrayList class ends here*************************//******************Graph class starts here**************************class Graph {    int nVertices, nEdges ;    bool directed ;    ArrayList  * adjList ;    int *color ;    int *parent ;    int *dist ;    //define other variables required for bfs such as color, parent, and dist    //you must use pointers and dynamic allocationpublic:    Graph(bool dir = false);    ~Graph();    void setnVertices(int n);    void addEdge(int u, int v);    void addEdge(int u, int v, int w) ;    void removeEdge(int u, int v,int w);    bool isEdge(int u, int v);    int getDegree(int u);    void printAdjVertices(int u);    bool hasCommonAdjacent(int u, int v);    int getDist(int u, int v);    void printGraph();    void bfs(int source); //will run bfs in the graph    void dfs(int source); //will run dfs in the graph};Graph::Graph(bool dir) {    nVertices = 0 ;    nEdges = 0 ;    adjList = 0 ;    directed = dir ; //set direction of the graph    color = new int[nVertices];    parent = new int[nVertices];    dist = new int[nVertices] ;//define other variables to be initialized}void Graph::setnVertices(int n) {    this->nVertices = n ;    if(adjList!=0) delete[] adjList ; //delete previous list    adjList = new ArrayList[nVertices] ;}/**void Graph::addEdge(int u, int v) {    if(u<0 || v<0 || u>=nVertices || v>=nVertices) return; //vertex out of range    this->nEdges++ ;    adjList[u].insertItem(v) ;    if(!directed) adjList[v].insertItem(u) ;}*/void Graph::addEdge(int u, int v, int w){    if(u<0 || v<0 || u>=nVertices || v>=nVertices) return; //vertex out of range    this->nEdges++ ;    adjList[u].insertItem(v,w) ;    if(!directed) adjList[v].insertItem(u,w) ;}void Graph::removeEdge(int u, int v,int w) {    if(u<0 || v<0 || u>=nVertices || v>=nVertices) return;//write this function    if(isEdge(u,v)) {        this->nEdges-- ;        adjList[u].removeItem(v,w) ;        if(!directed) adjList[v].removeItem(u,w) ;    }    return ;}bool Graph::isEdge(int u, int v) {    if(u<0 || v<0 || u>=nVertices || v>=nVertices) return false;//returns true if (u,v) is an edge, otherwise should return false    if(adjList[u].searchItem(v) != NULL_VALUE ) return true ;    if(!directed) {        if(adjList[v].searchItem(u) != NULL_VALUE ) return true ;    }    return false ;}int Graph::getDegree(int u) {    if(u<0 || u>=nVertices ) return NULL_VALUE;    int len = 0 ;    if(directed) {        for(int i = 0 ; i < nVertices ; ++i) {            if(isEdge(i,u)) len++ ;        }    }    return (adjList[u].getLength() + len) ;  //returns the degree of vertex u}void Graph::printAdjVertices(int u) {    if(u<0 || u>=nVertices ) return;//prints all adjacent vertices of a vertex u    /**for(int i = 0 ; i < adjList[u].getLength() ; ++i) {        printf("%d ",adjList[u].getItem(i)) ;    }*/    adjList[u].printList() ;    printf("\n") ;}bool Graph::hasCommonAdjacent(int u, int v) {    if(u<0 || v<0 || u>=nVertices || v>=nVertices) return false;//returns true if vertices u and v have common adjacent vertices    for(int i = 0 ; i < nVertices ; ++i) {        if(isEdge(i,u) && isEdge(i,v)) return true ;    }    return false ;}/**void Graph::bfs(int source) {    //complete this function    //initialize BFS variables    for(int i = 0; i < nVertices ; ++i) {        color[i] = WHITE ;        parent[i] = -1 ;        dist[i] = INFINITY ;    }    Queue q ;    color[source] = GREY;    dist[source] = 0 ;    q.enqueue(source) ;    while( !q.empty() ) {        //complete this part        int u = q.dequeue() ;        for(int k = 0; k < adjList[u].getLength(); k++) {            int v = adjList[u].getItem(k) ;            if (color[v] == WHITE) {                color[v] = GREY ;                parent[v] = u ;                dist[v] = dist[u] + 1 ;                q.enqueue(v);            }        }        color[u] = BLACK ;    }}*//**int Graph::getDist(int u, int v) {    //returns the shortest path distance from u to v    //must call bfs using u as the source vertex, then use distance array to find the distance    if(u<0 || v<0 || u>=nVertices || v>=nVertices)return INFINITY ;    bfs(u) ;    return dist[v] ;}*/void Graph::printGraph() {    printf("\nNumber of vertices: %d, Number of edges: %d\n", nVertices, nEdges);    for(int i=0; i<nVertices; i++) {        printf("%d:", i);        /**for(int j=0; j<adjList[i].getLength(); j++) {            printf(" %d", adjList[i].getItem(j));        }*/        adjList[i].printList() ;        printf("\n");    }}Graph::~Graph() {    //write your destructor here}//**********************Graph class ends here******************************//******main function to test your code*************************int main(void) {    int n;    Graph g;    //Graph g(true) ;    printf("Enter number of vertices: ");    scanf("%d", &n);    g.setnVertices(n);    while(1) {        printf("1. Add edge. 2. Remove edge. 3. Is edge \n");        printf("4. Get degree. 5. Print Graph  6. Exit.\n");        printf("7. Print adjacent vertices. 8. Has common adjacent 9. Distance.\n");        int ch;        scanf("%d",&ch);        if(ch==1) {            int u, v , w;            scanf("%d%d%d", &u, &v,&w);            g.addEdge(u, v, w);        } else if(ch==2) {            int u, v , w;            scanf("%d%d%d", &u, &v, &w);            g.removeEdge(u, v, w);        } else if(ch==3) {            int u, v;            scanf("%d%d", &u, &v);            if(g.isEdge(u, v)) printf("Yes!\n");            else printf("No!\n") ;        } else if(ch==4) {            int u;            scanf("%d",&u);            printf("Degree of %d: %d\n",u,g.getDegree(u)) ;        } else if(ch==5) {            g.printGraph();        } else if(ch==6) {            break;        } else if(ch==7) {            int u;            scanf("%d",&u);            g.printAdjVertices(u) ;        } else if(ch==8) {            int u, v;            scanf("%d%d", &u, &v);            if(g.hasCommonAdjacent(u, v)) printf("Yes!\n");            else printf("No!\n") ;        } else if(ch==9) {            int u, v;            scanf("%d%d", &u, &v);            //printf("Distance between %d & %d : %d\n", u,v,g.getDist(u,v)) ;        }    }}